"""
Django settings for aquam project.

Generated by 'django-admin startproject' using Django 1.9.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
from unipath import Path
from boto.ses import SESConnection
from datetime import timedelta
from celery.schedules import crontab

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = Path(__file__).ancestor(2)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['AQUAM_SECRET_KEY']


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']
ADMINS = [
    ('준환', 'xncbf@naver.com'),
]
# Application definition

# ### 이메일 설정

EMAIL_BACKEND = 'django_ses.SESBackend'
AWS_SES_REGION_NAME = os.environ['AWS_SES_REGION_NAME']
AWS_SES_REGION_ENDPOINT = os.environ['AWS_SES_REGION_ENDPOINT']
AWS_ACCESS_KEY_ID = os.environ['AQUAM_AWS_ACCESS_KEY_ID']
AWS_SECRET_ACCESS_KEY = os.environ['AQUAM_AWS_SECRET_ACCESS_KEY']
AWS_SES_RETURN_PATH = 'xncbf12@gmail.com'
SERVER_EMAIL = 'xncbf12@gmail.com'
DEFAULT_FROM_EMAIL = 'noreply@autho.me'
SESConnection.DefaultRegionName = AWS_SES_REGION_NAME
SESConnection.DefaultRegionEndpoint = AWS_SES_REGION_ENDPOINT
# AWS_SES_AUTO_THROTTLE = 1.0  # 속도 조절 (초당 갯수)

#### celery 설정
BROKER_URL = 'amqp://guest:guest@localhost:5672//'
CELERY_IMPORTS = ('aquam.tasks', )
CELERY_RESULT_BACKEND = 'amqp://'

# CELERY_ANNOTATIONS = {'aquam.tasks.get_ses_statistics': {'rate_limit': '10/s'}}
CELERYBEAT_SCHEDULE = {
    'get_ses_statistics': {
        'task': 'aquam.tasks.get_ses_statistics',
        'schedule': timedelta(days=1),
    },
    'verify_end_yn': {
        'task': 'aquam.tasks.verify_end_yn',
        "schedule": timedelta(seconds=30),
    },
    'celery.backend_cleanup': {
        'task': 'celery.backend_cleanup',
        "schedule": crontab(minute='0'),
    }
}

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'django_ses',
    'storages',
    'blog',
    'django_celery_beat',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'aquam.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "django.core.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.core.context_processors.media",
                "django.core.context_processors.static",
            ],
        },
    },
]

WSGI_APPLICATION = 'aquam.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ['AQUAM_DATABASE_NAME'],
        'USER': os.environ['AQUAM_DATABASE_USER'],
        'PASSWORD': os.environ['AQUAM_DATABASE_PASSWORD'],
        'HOST': os.environ['AQUAM_DATABASE_HOST'],
        'PORT': os.environ['AQUAM_DATABASE_PORT'],
    }
}



# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/


STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR.child('static')

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'

AWS_ACCESS_KEY_ID = os.environ['JINO_AWS_ACCESS_KEY_ID']  # access key
AWS_SECRET_ACCESS_KEY = os.environ['JINO_AWS_SECRET_ACCESS_KEY']  # secret access key
AWS_REGION = 'ap-northeast-2'
AWS_STORAGE_BUCKET_NAME = 'jin-o'
AWS_QUERYSTRING_AUTH = False
AWS_S3_HOST = 's3.%s.amazonaws.com' % AWS_REGION
IMAGEKIT_DEFAULT_IMAGE_CACHE_BACKEND = 'imagekit.imagecache.NonValidatingImageCacheBackend'


MEDIA_URL = "http://" + AWS_S3_HOST + "/" + AWS_STORAGE_BUCKET_NAME + "/"
MEDIA_ROOT = BASE_DIR.child('images')
